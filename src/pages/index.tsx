import Head from "next/head";
import localFont from "next/font/local";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Cog,
  Heart,
  LogOut,
  MessageCircle,
  MessageCircleIcon,
  User,
  Users,
} from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useAuthStore } from "@/store/auth";
import NavBar from "@/components/sections/NavBar";
import PostForm from "@/components/sections/PostForm";
import { useEffect, useState } from "react";
import usePostStore, { Like, Post } from "@/store/posts";
import React from "react";
import axios from "@/utils/axiosConfig";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";

const geistSans = localFont({
  src: "../styles/fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "../styles/fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export default function Home() {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`${geistSans.variable} ${geistMono.variable}`}>
        <NavBar />
        <div className="flex flex-col min-h-screen bg-gradient-to-b from-purple-50 to-pink-100">
          <section className="w-full py-12 md:py-24 lg:py-32 xl:py-48">
            <div className="container px-4 md:px-6">
              <div className="flex flex-col items-center space-y-4 text-center">
                <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl/none bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600">
                  Create, Enhance, Share with AI
                </h1>
                <p className="mx-auto max-w-[700px] text-gray-500 md:text-xl dark:text-gray-400">
                  VisualAI revolutionizes social media with cutting-edge AI
                  technology. Transform your photos, generate stunning visuals,
                  and connect like never before.
                </p>
                <div className="w-full max-w-sm space-y-2">
                  <Input
                    type="email"
                    placeholder="Enter your email"
                    className="rounded-full"
                  />
                  <Button className="w-full rounded-full" size="lg">
                    Join the Waitlist
                  </Button>
                </div>
              </div>
            </div>
          </section>
        </div>
        <main className="container mx-auto mt-8 grid grid-cols-4 gap-8">
          <aside className="col-span-1">
            <Sidebar />
          </aside>
          <div className="col-span-2 space-y-4">
            <PostForm />
            <PostList />
          </div>
          <aside className="col-span-1 space-y-8">
            <PeopleYouMayKnow />
            <BoostYourPost />
          </aside>
        </main>
      </div>
    </div>
  );
}

const PostList = () => {
  const { posts, loading, submitting, fetchPosts } = usePostStore();
  console.log("Posteos PostList: ", posts);
  useEffect(() => {
    fetchPosts();
  }, [fetchPosts]);
  return (
    <div className="gap-4 flex flex-col">
      {submitting ? <PostCardSkeleton /> : null}
      {loading ? (
        <>
          <PostCardSkeleton />
          <PostCardSkeleton />
          <PostCardSkeleton />
        </>
      ) : (
        posts?.map((data) => <PostCard {...data} key={data.id} />)
      )}
    </div>
  );
};

const PostCardSkeleton = () => {
  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex items-center space-x-4 mb-4">
          {/* Skeleton Avatar */}
          <div className="w-10 h-10 bg-gray-300 rounded-full animate-pulse"></div>
          <div className="flex-1 space-y-2">
            {/* Skeleton Name */}
            <div className="w-24 h-4 bg-gray-300 rounded animate-pulse"></div>
            {/* Skeleton Description */}
            <div className="w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
          </div>
        </div>

        {/* Skeleton Post Content */}
        <div className="space-y-3">
          <div className="w-full h-4 bg-gray-300 rounded animate-pulse"></div>
          <div className="w-5/6 h-4 bg-gray-300 rounded animate-pulse"></div>
          <div className="w-3/4 h-4 bg-gray-300 rounded animate-pulse"></div>
        </div>
      </CardContent>
    </Card>
  );
};

const Sidebar = () => {
  const { logout, user } = useAuthStore();
  return (
    <Card>
      <CardHeader>
        <CardTitle>{user?.username}</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Button variant="ghost" className="w-full justify-start">
          <User className="mr-2 h-4 w-4" />
          Profile
        </Button>
        <Button variant="ghost" className="w-full justify-start">
          <Users className="mr-2 h-4 w-4" />
          Find friends
        </Button>
        <Button variant="ghost" className="w-full justify-start">
          <MessageCircle className="mr-2 h-4 w-4" />
          User analytics
        </Button>
        <Button variant="ghost" className="w-full justify-start">
          <Cog className="mr-2 h-4 w-4" />
          Settings
        </Button>
        <Button variant="ghost" className="w-full justify-start">
          <User className="mr-2 h-4 w-4" />
          Security data
        </Button>
        <Button
          variant="ghost"
          className="w-full justify-start text-red-500"
          onClick={logout}
        >
          <LogOut className="mr-2 h-4 w-4" />
          Log out
        </Button>
      </CardContent>
    </Card>
  );
};

const PostCard = (props: Post) => {
  const { user } = useAuthStore();
  const [newComment, setNewComment] = useState("");
  const [showAllComments, setShowAllComments] = useState(false);
  const [showInputComment, setShowInputComment] = useState(false);
  const handleCommentSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Lógica para enviar el nuevo comentario
  };

  const visibleComments = showAllComments
    ? props.comments
    : props.comments.slice(0, 3);
  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex items-center space-x-4 mb-4">
          <Avatar>
            <AvatarImage
              src="/placeholder.svg?height=40&width=40"
              alt="Tony Stark"
            />
            <AvatarFallback>TS</AvatarFallback>
          </Avatar>
          <div>
            <h3 className="font-semibold">
              {props.user.profile[0]?.fullName || props.user.username}
            </h3>
            <p className="text-sm text-muted-foreground">
              @{props.user.username}
            </p>
          </div>
        </div>
        <p>{props.content}</p>
        <div className="flex items-center justify-between text-sm text-muted-foreground mt-4">
          <span className="w-full">
            {new Date(props.createdAt).toLocaleString()}
          </span>
          <div className="flex items-center space-x-4">
            {user && (
              <LikePost
                postId={props.id}
                initialLikes={props.likes}
                userId={user.id}
              />
            )}
            <Button
              className="flex items-center space-x-1"
              variant="outline"
              onClick={() => setShowInputComment(true)}
            >
              <MessageCircleIcon className="w-4 h-4" />
              <span>{props.comments?.length || 0}</span>
            </Button>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col space-y-4">
        <div className="w-full space-y-4">
          {visibleComments.map((comment) => (
            <div key={comment.id} className="flex space-x-4">
              <Avatar>
                <AvatarImage
                  src={comment.user.avatarUrl}
                  alt={comment.user.fullname}
                />
                <AvatarFallback>
                  {comment.user.fullname.slice(0, 2).toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <div className="flex-1 space-y-1">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold">{comment.user.fullname}</h4>
                  <span className="text-xs text-muted-foreground">
                    {new Date(comment.createdAt).toLocaleString()}
                  </span>
                </div>
                <p className="text-sm">{comment.content}</p>
              </div>
            </div>
          ))}
        </div>

        {/* Botón para ver más comentarios si hay más de 3 */}
        {props.comments.length > 3 && !showAllComments && (
          <Button
            variant="link"
            className="w-full text-left"
            onClick={() => setShowAllComments(true)}
          >
            Ver más comentarios
          </Button>
        )}

        {/* Formulario para enviar un comentario */}
        {showInputComment && (
          <form onSubmit={handleCommentSubmit} className="w-full space-y-4">
            <Textarea
              placeholder="Write a comment..."
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              className="w-full"
            />
            <Button type="submit" className="w-full">
              Post Comment
            </Button>
          </form>
        )}
      </CardFooter>
    </Card>
  );
};

const LikePost = ({
  postId,
  initialLikes,
  userId,
}: {
  postId: number;
  initialLikes: Like[];
  userId: number;
}) => {
  const [likes, setLikes] = useState(initialLikes);
  const [liked, setLiked] = useState(
    likes.some((like) => like.userId === userId),
  );

  const handleLikeClick = async () => {
    try {
      setLiked(!liked);
      setLikes((prevLikes) =>
        liked
          ? prevLikes.filter((like) => like.userId !== userId)
          : [...prevLikes, { id: 0, postId, userId, createdAt: new Date() }],
      );
      await axios.post("/api/posts/like", { postId });
    } catch (error) {
      setLiked(liked);
      setLikes((prevLikes) =>
        liked
          ? [...prevLikes, { id: 0, postId, userId, createdAt: new Date() }]
          : prevLikes.filter((like) => like.userId !== userId),
      );
    }
  };

  return (
    <Button
      variant={liked ? "default" : "outline"}
      className="justify-start"
      size="sm"
      onClick={handleLikeClick}
    >
      <Heart className="mr-2 h-4 w-4" fill={liked ? "currentColor" : "none"} />{" "}
      {likes.length}
    </Button>
  );
};

const PeopleYouMayKnow = () => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>People you may know</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {[
          "Tony Stark",
          "Bruce Banners",
          "Natasha Ramanoff",
          "Barton Clint",
        ].map((name, index) => (
          <div key={index} className="flex items-center space-x-4">
            <Avatar>
              {/* <AvatarImage
                src={`/placeholder.svg?height=40&width=40&text=${name.charAt(0)}`}
                alt={name}
              /> */}
              <AvatarFallback>
                {name
                  .split(" ")
                  .map((n) => n[0])
                  .join("")}
              </AvatarFallback>
            </Avatar>
            <div>
              <h4 className="font-semibold">{name}</h4>
              <p className="text-sm text-muted-foreground">6M+ Followers</p>
            </div>
          </div>
        ))}
      </CardContent>
    </Card>
  );
};

const BoostYourPost = () => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Boost your post</CardTitle>
      </CardHeader>
      <CardContent>
        {/* <Image
          src="/placeholder.svg?height=200&width=300"
          alt="Dog"
          className="w-full rounded-md mb-4"
        /> */}
        <p className="text-sm text-muted-foreground">
          @steve_rogers With my lovable dog named Bruno with a smile &...
        </p>
        <div className="flex items-center mt-2">
          <Avatar className="h-6 w-6">
            <AvatarImage src="/placeholder.svg?height=24&width=24" alt="User" />
            <AvatarFallback>U</AvatarFallback>
          </Avatar>
          <span className="text-sm ml-2">
            & 180 others liked your post &...
          </span>
        </div>
      </CardContent>
    </Card>
  );
};
